{
  "info": {
    "name": "AspNetCore8Test Products API",
    "description": "API collection for testing Products endpoints generated from Swagger",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5198",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Get All Products",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.be.an('array');",
              "});",
              "",
              "pm.test('Response time is less than 500ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(500);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/Products",
          "host": ["{{baseUrl}}"],
          "path": ["api", "Products"]
        }
      }
    },
    {
      "name": "Create Product",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has product data', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('id');",
              "    pm.expect(responseJson).to.have.property('name');",
              "    pm.expect(responseJson).to.have.property('price');",
              "    pm.expect(responseJson.name).to.eql('Test Product');",
              "});",
              "",
              "pm.test('Set product ID for subsequent tests', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.collectionVariables.set('productId', responseJson.id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Test Product\",\n  \"description\": \"A test product for API testing\",\n  \"price\": 99.99,\n  \"category\": \"電子產品\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/Products",
          "host": ["{{baseUrl}}"],
          "path": ["api", "Products"]
        }
      }
    },
    {
      "name": "Get Product by ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Product data is correct', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('id');",
              "    pm.expect(responseJson).to.have.property('name');",
              "    pm.expect(responseJson).to.have.property('description');",
              "    pm.expect(responseJson).to.have.property('price');",
              "    pm.expect(responseJson).to.have.property('category');",
              "    pm.expect(responseJson).to.have.property('createdDate');",
              "    pm.expect(responseJson).to.have.property('isActive');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/Products/{{productId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "Products", "{{productId}}"]
        }
      }
    },
    {
      "name": "Update Product",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Product was updated correctly', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.name).to.eql('Updated Test Product');",
              "    pm.expect(responseJson.price).to.eql(149.99);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"id\": {{productId}},\n  \"name\": \"Updated Test Product\",\n  \"description\": \"An updated test product\",\n  \"price\": 149.99,\n  \"category\": \"電子產品\",\n  \"isActive\": true\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/Products/{{productId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "Products", "{{productId}}"]
        }
      }
    },
    {
      "name": "Delete Product",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 204', function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "pm.test('Response has no content', function () {",
              "    pm.expect(pm.response.text()).to.be.empty;",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/Products/{{productId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "Products", "{{productId}}"]
        }
      }
    },
    {
      "name": "Get Product by ID (After Delete - Should Fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test('Product not found message', function () {",
              "    pm.expect(pm.response.text()).to.include('找不到');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/Products/{{productId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "Products", "{{productId}}"]
        }
      }
    },
    {
      "name": "Create Product with Invalid Data",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Validation errors are returned', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('errors');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"price\": -10,\n  \"category\": \"\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/Products",
          "host": ["{{baseUrl}}"],
          "path": ["api", "Products"]
        }
      }
    }
  ]
}
